name: CI - Docker Build & Publish

on:
  push:
    branches: [ main ]
    tags: [ "v*.*.*" ]        
  workflow_dispatch:           

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write 
      id-token: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional: fail early if your compose is broken
      - name: Validate docker-compose
        run: docker compose -f docker-compose.yml config

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU (optional for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch           # :main on main branch
            type=sha                        # :sha-<short>
            type=semver,pattern={{version}} # :v1.2.3 when tagging releases
            type=semver,pattern={{major}}.{{minor}} # :v1.2
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          # For single arch now; uncomment the next line to go multi-arch
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # (optional) pass build args from repo vars/secrets if you need
          # build-args: |
          #   APP_ENV=${{ vars.APP_ENV }}
          #   COMMIT_SHA=${{ github.sha }}

      # Optional: attach a build provenance/attestation (SLSA-ish)
      # - name: Generate provenance (attest)
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.IMAGE_NAME }}
      #     subject-digest: ${{ steps.build-and-push.outputs.digest }}
      #     push-to-registry: true